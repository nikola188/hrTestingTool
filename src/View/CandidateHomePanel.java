package View;

import Beans.Candidate;
import Beans.CandidateTechnology;
import Beans.Result;
import Beans.Technology;
import DAO.CandidateDAO;
import DAO.CandidateTechnologyDAO;
import DAO.ResultDAO;
import DAO.TechnologyDAO;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;


/**
 *
 * @author dusan.cvijic
 * @author igor.neskovic
 */
public class CandidateHomePanel extends JPanel {

//    Used for string checks later
    private final String NEW_CANDIDATE_FIELD = "New Candidate";
    
//    Used as key values for componentMap collection
    private enum ComponentType {
        JBUTTON, JCOMBOBOX, JLABEL, JSCROLLPANE, JTEXTAREA, JCHECKBOX
    }
    
//    Core variables declaration
    private JFrame root;
    private List<Candidate> allCandidates;
    private List<Technology> knownTechnologies;
    private List<Result> candidateResults;
    private Candidate currentCandidate;
    private String selectedCandidate;
//    
    
    public CandidateHomePanel() {
//        Initializes panel and components
        initComponents();
//        Sets up the componentMap collection used for grabbing needed lists of components
        initComponentMap();
//        Puts checkboxes into it's own collection to correspond to technologyID
        initCheckBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        
        
//        COMPONENT INSTANTIATION
        componentMap = new HashMap<>();
        checkBoxes = new HashMap<>();
        jbDelete = new JButton();
        jComboBoxSelectCandidate = new JComboBox<>();
        jlTechnologies = new JLabel();
        jlResults = new JLabel();
        jbSubmit = new JButton();
        jspResults = new JScrollPane();
        jtaResults = new JTextArea();
        
        jcbJava = new JCheckBox();
        jcbSQL = new JCheckBox();
        jcbPHP = new JCheckBox();
        jcbPython = new JCheckBox();
        jcbJavaScript = new JCheckBox();
        jcbAngular = new JCheckBox();
        jcbReact = new JCheckBox();
        jcbCPlusPlus = new JCheckBox();
        jcbCSharp = new JCheckBox();
        jcbSpring = new JCheckBox();
        jcbMongo = new JCheckBox();
        jcb12 = new JCheckBox();
        jcb13 = new JCheckBox();
        jcb14 = new JCheckBox();
        jcb15 = new JCheckBox();
//        

        refreshBase(NEW_CANDIDATE_FIELD);
        
//        COMPONENT VALUES
        jbDelete.setText("Delete");
        jbDelete.setEnabled(false);
        jbSubmit.setText("Submit");
        
        jlTechnologies.setText("Technologies");
        jlResults.setText("Results");

        jtaResults.setColumns(20);
        jtaResults.setRows(5);
        jtaResults.setEnabled(false);
        jspResults.setViewportView(jtaResults);

        jcbJava.setText("JAVA");
        jcbSQL.setText("SQL");
        jcbPHP.setText("PHP");
        jcbPython.setText("PYTHON");
        jcbJavaScript.setText("JAVASCRIPT");
        jcbAngular.setText("ANGULAR");
        jcbReact.setText("REACT");
        jcbCPlusPlus.setText("C++");
        jcbCSharp.setText("C#");
        jcbSpring.setText("SPRING");
        jcbMongo.setText("MONGO");
        jcb12.setText("PLACEHOLDER TECHNOLOGY 12");
        jcb13.setText("PLACEHOLDER TECHNOLOGY 13");
        jcb14.setText("PLACEHOLDER TECHNOLOGY 14");
        jcb15.setText("PLACEHOLDER TECHNOLOGY 15");
//        
        
//        EVENT LISTENERS
        
//        Listener for selecting a candidate from dropdown menu
        jComboBoxSelectCandidate.addActionListener ((ActionEvent e) -> {
            
            selectedCandidate = (String) ((javax.swing.JComboBox) e.getSource()).getSelectedItem();
            jtaResults.setText("");
            if(selectedCandidate.equals(NEW_CANDIDATE_FIELD)){
//            If new candidate field is selected then you must be able to create a new candidate
                getDeleteButton().setEnabled(false);
                deselectBoxes();
            } else {
//                If NEW_CANDIDATE_FIELD is not selected, then you must be able to select, delete and update specified candidate
                int candidateId = Integer.parseInt(selectedCandidate);
                
                currentCandidate = CandidateDAO.get(candidateId);
                knownTechnologies = TechnologyDAO.getByCandidateId(candidateId);
                candidateResults = ResultDAO.getByCandidateId(candidateId);
                if(candidateResults.isEmpty()){
                    System.out.println("is empty");
                } else {
                    StringBuilder resultsString = new StringBuilder();
                    for(Result results : candidateResults){
                        resultsString.append("Result #");
                        resultsString.append(results.getId());
                        resultsString.append(" -- ");
                        resultsString.append(results.getIdTechnology().getText());
                        resultsString.append(": ");
                        resultsString.append(results.getResult());
                        resultsString.append(" points,\n");
                    }
                    resultsString.deleteCharAt(resultsString.length() - 2);
                    jtaResults.setText(resultsString.toString());
                }
                
                
                getDeleteButton().setEnabled(true);
                
//                Method check boxes of technologies that candidate knows, and unchecks ones that he doesnt know
                checkRequiredBoxes();
                
            }
        });
        
        jbSubmit.addActionListener ((ActionEvent e) -> {
            
            if(selectedCandidate.equals(NEW_CANDIDATE_FIELD)){
                int candidateId = CandidateDAO.insertAndGetId(new Candidate());
                currentCandidate = CandidateDAO.get(candidateId);
            } else {
                CandidateTechnologyDAO.deleteByCandidateId(currentCandidate.getId());
            }
            insertTechnologies(currentCandidate);
            refreshBase(currentCandidate.getId().toString());
        });
        
        jbDelete.addActionListener ((ActionEvent e) -> {
            
            if(!selectedCandidate.equals(NEW_CANDIDATE_FIELD)){
                int candidateId = Integer.parseInt(selectedCandidate);
                currentCandidate = CandidateDAO.get(candidateId);
                String confirmString = "Are you sure you want to delete " + currentCandidate.getId() + " from the base?";
                int answer = JOptionPane.showConfirmDialog(root, confirmString);
//                0 is yes
                if(answer == 0){
                    boolean success = deleteCandidate(currentCandidate);
                    deselectBoxes();
                    jtaResults.setText("");
                    refreshBase(NEW_CANDIDATE_FIELD);
                }
            }
            
        });
        
//        --------------------------------------

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jspResults)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jlResults)
                        .addComponent(jComboBoxSelectCandidate, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jlTechnologies)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jbSubmit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbDelete))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jcbPython)
                                    .addGap(18, 18, 18)
                                    .addComponent(jcbCSharp))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jcbJavaScript)
                                    .addGap(18, 18, 18)
                                    .addComponent(jcbSpring))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jcbPHP)
                                    .addGap(18, 18, 18)
                                    .addComponent(jcbCPlusPlus))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jcbSQL)
                                    .addGap(18, 18, 18)
                                    .addComponent(jcbReact))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jcbJava)
                                    .addGap(18, 18, 18)
                                    .addComponent(jcbAngular)))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jcbMongo)
                                .addComponent(jcb12)
                                .addComponent(jcb13)
                                .addComponent(jcb15)
                                .addComponent(jcb14, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(429, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jComboBoxSelectCandidate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlTechnologies)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbJava)
                    .addComponent(jcbAngular)
                    .addComponent(jcbMongo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbSQL)
                    .addComponent(jcbReact)
                    .addComponent(jcb12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbPHP)
                    .addComponent(jcbCPlusPlus)
                    .addComponent(jcb13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbPython)
                    .addComponent(jcbCSharp)
                    .addComponent(jcb14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbJavaScript)
                    .addComponent(jcbSpring)
                    .addComponent(jcb15))
                .addGap(18, 18, 18)
                .addComponent(jlResults)
                .addGap(18, 18, 18)
                .addComponent(jspResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSubmit)
                    .addComponent(jbDelete))
                .addContainerGap(114, Short.MAX_VALUE))
        );
    }// </editor-fold>                        


    
    public void setParent(JFrame frame){
        root = frame;
    }
    
    private void initComponentMap(){
        componentMap.put(ComponentType.JBUTTON, new ArrayList<>());
        componentMap.put(ComponentType.JCHECKBOX, new ArrayList<>());
        componentMap.put(ComponentType.JCOMBOBOX, new ArrayList<>());
        componentMap.put(ComponentType.JLABEL, new ArrayList<>());
        componentMap.put(ComponentType.JSCROLLPANE, new ArrayList<>());
        componentMap.put(ComponentType.JTEXTAREA, new ArrayList<>());
        
        Component[] componentsTemp = this.getComponents();
        System.out.println("ComponentsTemp " + componentsTemp.length);
        for(Component temp : componentsTemp){
            
            if(temp instanceof JButton){
                componentMap.get(ComponentType.JBUTTON).add(temp);
            } else if (temp instanceof JCheckBox){
                componentMap.get(ComponentType.JCHECKBOX).add(temp);
            } else if (temp instanceof JComboBox){
                componentMap.get(ComponentType.JCOMBOBOX).add(temp);
            } else if (temp instanceof JLabel){
                componentMap.get(ComponentType.JLABEL).add(temp);
            } else if (temp instanceof JScrollPane){
                componentMap.get(ComponentType.JSCROLLPANE).add(temp);
                Component[] scrollPaneComponents = ((JScrollPane) temp).getViewport().getComponents();
                for(Component tempSP : scrollPaneComponents){
                    if(tempSP instanceof JTextArea){
                        componentMap.get(ComponentType.JTEXTAREA).add(tempSP);
                    }
                }
            }
        
        }
        
    }
    
    private JButton getDeleteButton(){
        return jbDelete;
    }
    
    private void checkRequiredBoxes(){
        
        for(Map.Entry<Integer, JCheckBox> box : checkBoxes.entrySet()){
            box.getValue().setSelected(false);
        }
    
        for(Map.Entry<Integer, JCheckBox> box : checkBoxes.entrySet()){
            JCheckBox currentBox = box.getValue();
            for(Technology tech : knownTechnologies){
                if(currentBox.getText().equals(tech.getText())){
                    currentBox.setSelected(true);
                    continue;
                }
            }
        }
        
    }
    
    private void insertTechnologies(Candidate candidate){
        
        List<Component> boxes = componentMap.get(ComponentType.JCHECKBOX);
        List<String> stringTechs = new ArrayList<>();
        
        for(Component current : boxes){
            JCheckBox box;
            if(current instanceof JCheckBox){
                box = (JCheckBox) current;
            } else {
                continue;
            }
            
            if(box.isSelected()){
                stringTechs.add(box.getText());
            }            
        }
        
        List<Technology> technologies = TechnologyDAO.findMultipleByText(stringTechs);
        System.out.println("Size of tecnhologies: " + technologies.size());
        
        massInsert(candidate, technologies);
        
        refreshBase(String.valueOf(candidate.getId()));
        
    }
    
    private void massInsert(Candidate candidate, List<Technology> technologies){
        CandidateTechnology ct;
        for(Technology tech : technologies){
            ct = new CandidateTechnology();
            ct.setIdCandidate(candidate);
            ct.setIdTechnology(tech);
            CandidateTechnologyDAO.insert(ct);
        }
        
    }
    
    private void refreshBase(String selected){
        
        DefaultComboBoxModel<String> boxModel = new DefaultComboBoxModel<>();
        boxModel.addElement(NEW_CANDIDATE_FIELD);
        
        allCandidates = CandidateDAO.get();
        currentCandidate = null;
        selectedCandidate = selected;
        
        allCandidates.forEach((c) -> {
            boxModel.addElement(c.getId().toString());
        });
        jComboBoxSelectCandidate.setModel(boxModel);
        
        jComboBoxSelectCandidate.setSelectedItem(selectedCandidate);
        
    }
    
    private void initCheckBoxes(){
        checkBoxes.put(1, jcbJava);
        checkBoxes.put(2, jcbSQL);
        checkBoxes.put(3, jcbPHP);
        checkBoxes.put(4, jcbPython);
        checkBoxes.put(5, jcbJavaScript);
        checkBoxes.put(6, jcbAngular);
        checkBoxes.put(7, jcbReact);
        checkBoxes.put(8, jcbCPlusPlus);
        checkBoxes.put(9, jcbCSharp);
        checkBoxes.put(10, jcbSpring);
        checkBoxes.put(11, jcbMongo);
        checkBoxes.put(12, jcb12);
        checkBoxes.put(13, jcb13);
        checkBoxes.put(14, jcb14);
        checkBoxes.put(15, jcb15);
    }
    
    private boolean deleteCandidate(Candidate candidate){
        boolean success = false;
        if(ResultDAO.deleteByCandidateId(candidate.getId()) && CandidateTechnologyDAO.deleteByCandidateId(candidate.getId())){
            success = true;
        }
        success = CandidateDAO.delete(candidate);
        return success;
    }
    
    private void deselectBoxes(){
        for(Map.Entry<Integer, JCheckBox> box : checkBoxes.entrySet()){
            box.getValue().setSelected(false);
        }
    }

    // Component variables declaration - do not modify 
    private Map<ComponentType, List<Component>> componentMap;
    private Map<Integer, JCheckBox> checkBoxes;
    private javax.swing.JLabel jlTechnologies;
    private javax.swing.JLabel jlResults;   
    
    private javax.swing.JComboBox<String> jComboBoxSelectCandidate;
    
    private javax.swing.JCheckBox jcbJava;
    private javax.swing.JCheckBox jcbSQL;
    private javax.swing.JCheckBox jcbPHP;
    private javax.swing.JCheckBox jcbPython;
    private javax.swing.JCheckBox jcbJavaScript;
    private javax.swing.JCheckBox jcbAngular;
    private javax.swing.JCheckBox jcbReact;
    private javax.swing.JCheckBox jcbCPlusPlus;
    private javax.swing.JCheckBox jcbCSharp;
    private javax.swing.JCheckBox jcbSpring;
    private javax.swing.JCheckBox jcbMongo;
    private javax.swing.JCheckBox jcb12;
    private javax.swing.JCheckBox jcb13;
    private javax.swing.JCheckBox jcb14;
    private javax.swing.JCheckBox jcb15;
    
    private javax.swing.JTextArea jtaResults;
    
    private javax.swing.JButton jbSubmit; 
    private javax.swing.JButton jbDelete;    
    
    private javax.swing.JScrollPane jspResults;
    // End of component variables declaration            
}
